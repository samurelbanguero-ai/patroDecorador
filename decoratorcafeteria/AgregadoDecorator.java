// ðŸ“¦ Indica el paquete al que pertenece esta clase.
// En este caso, estÃ¡ dentro del proyecto "decoratorcafeteria".
package decoratorcafeteria;

// ---------------------------------------------------------------
// ðŸ”¹ Clase abstracta AgregadoDecorator
// ---------------------------------------------------------------
// Esta clase representa un "decorador" general dentro del patrÃ³n Decorator.
// Su funciÃ³n es permitir agregar nuevas caracterÃ­sticas o comportamientos
// a las bebidas (como leche, canela o crema batida) sin cambiar su cÃ³digo original.
//
// Extiende o implementa la interfaz "Bebida", por eso todos los decoradores
// son tratados como si tambiÃ©n fueran bebidas.
public abstract class AgregadoDecorator implements Bebida {

    // ---------------------------------------------------------------
    // ðŸ”¹ Atributo protegido
    // ---------------------------------------------------------------
    // "bebida" es una referencia a un objeto del tipo Bebida.
    // Este atributo permite "envolver" una bebida dentro de otra,
    // lo que es la base del patrÃ³n Decorator.
    protected Bebida bebida;

    // ---------------------------------------------------------------
    // ðŸ”¹ Constructor
    // ---------------------------------------------------------------
    // El constructor recibe como parÃ¡metro una bebida que serÃ¡ "decorada".
    // Por ejemplo, podrÃ­amos pasar un objeto de tipo ChocolateCaliente.
    //
    // Ejemplo:
    // Bebida miBebida = new CremaBatida(new ChocolateCaliente());
    public AgregadoDecorator(Bebida bebida) {
        this.bebida = bebida;
    }

    // ---------------------------------------------------------------
    // ðŸ”¹ MÃ©todos abstractos
    // ---------------------------------------------------------------
    // Estos mÃ©todos se declaran, pero no se implementan aquÃ­.
    // Las clases hijas (como CremaBatida o Canela) deberÃ¡n definir
    // cÃ³mo se comportan exactamente.
    //
    // getDescripcion() -> devuelve el texto que describe la bebida con su agregado.
    // costo() -> devuelve el precio total (bebida base + agregado).
    @Override
    public abstract String getDescripcion();

    @Override
    public abstract double costo();
}
